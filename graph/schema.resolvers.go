package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"newFeatures/graph/generated"
	"newFeatures/graph/model"
	"newFeatures/models"
)

// CreateTodoElastic is the resolver for the createTodoElastic field.
func (r *mutationResolver) CreateTodoElastic(ctx context.Context, input model.TodoInput) (string, error) {
	// Create a new instance of TodoElastic
	todoElastic := &models.TodoElastic{
		Title:     input.Title,
		Completed: *input.Completed,
	}

	// Create document in Elasticsearch
	id, err := r.Serv.TodoElasticService.CreateTodo(ctx, todoElastic)
	if err != nil {
		return "", err
	}

	return id, nil
}

// UpdateTodoElastic is the resolver for the updateTodoElastic field.
func (r *mutationResolver) UpdateTodoElastic(ctx context.Context, input model.TodoInputID) (string, error) {
	// Get the todo from Elasticsearch
	todo, err := r.Serv.TodoElasticService.GetTodo(ctx, input.ID)
	if err != nil {
		return "", err
	}

	// Update the todo with the new data
	if input.Title != nil {
		todo.Title = *input.Title
	}
	if input.Completed != nil {
		todo.Completed = *input.Completed
	}

	// Update the todo in Elasticsearch
	id, err := r.Serv.TodoElasticService.UpdateTodo(ctx, todo)
	if err != nil {
		return "", err
	}

	return id, nil
}

// DeleteTodoElastic is the resolver for the deleteTodoElastic field.
func (r *mutationResolver) DeleteTodoElastic(ctx context.Context, id string) (bool, error) {
	// Delete the todo from Elasticsearch
	err := r.Serv.TodoElasticService.DeleteTodoByID(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// GetTodoElastic is the resolver for the getTodoElastic field.
func (r *queryResolver) GetTodoElastic(ctx context.Context, id string) (*model.TodoElastic, error) {
	// Get the todo from Elasticsearch
	todo, err := r.Serv.TodoElasticService.GetTodo(ctx, id)
	if err != nil {
		return nil, err
	}

	return &model.TodoElastic{
		ID:        todo.ID,
		Title:     todo.Title,
		Completed: todo.Completed,
	}, nil
}

// GetTodosElastic is the resolver for the getTodosElastic field.
func (r *queryResolver) GetTodosElastic(ctx context.Context, page *int, limit *int) ([]*model.TodoElastic, error) {
	// Set default values for page and limit
	var pg, lim int64 = 1, 10
	if page != nil && *page > 0 {
		pg = int64(*page)
	}
	if limit != nil && *limit > 0 {
		lim = int64(*limit)
	}
	todos, err := r.Serv.TodoElasticService.GetTodos(ctx, pg, lim)
	if err != nil {
		return nil, err
	}
	var todoResults []*model.TodoElastic
	for _, todo := range todos {
		todoResults = append(todoResults, &model.TodoElastic{
			ID:        todo.ID,
			Title:     todo.Title,
			Completed: todo.Completed,
		})
	}
	return todoResults, nil
}

// SearchTodosElastic is the resolver for the searchTodosElastic field.
func (r *queryResolver) SearchTodosElastic(ctx context.Context, query string, page *int, limit *int) ([]*model.TodoElastic, error) {
	// Set default values for page and limit
	var pg, lim int64 = 1, 10
	if page != nil && *page > 0 {
		pg = int64(*page)
	}
	if limit != nil && *limit > 0 {
		lim = int64(*limit)
	}
	// Search for todos in Elasticsearch
	todos, err := r.Serv.TodoElasticService.SearchTodos(ctx, query, pg, lim)
	if err != nil {
		return nil, err
	}

	// Convert todos to the format expected by the GraphQL schema
	var todoResults []*model.TodoElastic
	for _, todo := range todos {
		todoResults = append(todoResults, &model.TodoElastic{
			ID:        todo.ID,
			Title:     todo.Title,
			Completed: todo.Completed,
		})
	}

	return todoResults, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
